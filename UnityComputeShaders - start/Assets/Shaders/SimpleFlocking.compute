#pragma kernel CSMain
#define GROUP_SIZE 256

struct Boid
{
	float3 position;
	float3 direction;
};

RWStructuredBuffer<Boid> boidsBuffer;

float time;
float deltaTime;
float rotationSpeed;
float boidSpeed;
float boidSpeedVariation;
float3 flockPosition;
float neighbourDistance;
int boidsCount;

[numthreads(GROUP_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	Boid boid = boidsBuffer[id.x];

	float3 seperation;
	float3 alignment;
	float3 cohesion = flockPosition;

	uint nearbyCount = 1;

	for(int i = 0; i < boidsCount; i++)
	{
		if(i != int(id.x))
		{
			Boid tempBoid = boidsBuffer[i];
			if(distance(boid.position, tempBoid.position) < neighbourDistance)
			{
				alignment += tempBoid.direction;
				cohesion += tempBoid.position;
				nearbyCount++;
			}
		}
	}
	float average = 1.0/nearbyCount;
	alignment *= average;
	cohesion *= average;
	cohesion = normalize(cohesion - boid.position);

	direction = alignment + seperation + cohesion;

	boid.direction = lerp(direction, normalize(boid.direction), 0.94);
	boid.position += boid.direction * boidSpeed * deltaTime;

	boidsBuffer[id.x] = boid;

}


